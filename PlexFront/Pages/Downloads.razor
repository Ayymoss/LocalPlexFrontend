@page "/Downloads"
@inject QBitTorrentService TorrentService
@inject IBreakpointService BreakpointService

<PageTitle>Downloads</PageTitle>

<MudStack Spacing="0">
    <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-4 rounded-b-0">
        <MudText Typo="Typo.h4"
                 Align="Align.Center"
                 Class="mud-text-secondary mr-4">
            Downloads
        </MudText>
        @if (_serverInfo?.DiskUsage is not null && _breakpoint is Breakpoint.Xl or Breakpoint.Xxl)
        {
            <MudSpacer/>
            @if (_serverInfo.DiskUsage.ContainsKey("root"))
            {
                <MudStack Justify="Justify.Center" Spacing="0">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2">Local Availability</MudText>
                    <MudProgressLinear Style="width: 500px;"
                                       Color="@(_serverInfo.DiskUsage["root"].Percentage < 0.95 ? Color.Info : Color.Error)"
                                       Rounded="true"
                                       Size="Size.Large"
                                       Value="@(_serverInfo.DiskUsage["root"].Used)"
                                       Max="@(_serverInfo.DiskUsage["root"].Total)">
                        <MudText Class="mt-1" Typo="Typo.caption" Color="Color.Dark">@($"{_serverInfo.DiskUsage["root"].Used / Math.Pow(1024, 3):N2}/{_serverInfo.DiskUsage["root"].Total / Math.Pow(1024, 3):N2} GiB")</MudText>
                    </MudProgressLinear>
                </MudStack>
            }
            @if (_serverInfo.DiskUsage.ContainsKey("media"))
            {
                <MudStack Class="ml-2" Justify="Justify.Center" Spacing="0">
                    <MudText Align="Align.Center" Typo="Typo.subtitle2">Plex Availability</MudText>
                    <MudProgressLinear Style="width: 500px;"
                                       Color="@(_serverInfo.DiskUsage["media"].Percentage < 0.95 ? Color.Info : Color.Error)"
                                       Rounded="true"
                                       Size="Size.Large"
                                       Value="@(_serverInfo.DiskUsage["media"].Used)"
                                       Max="@(_serverInfo.DiskUsage["media"].Total)">
                        <MudText Class="mt-1" Typo="Typo.caption" Color="Color.Dark">@($"{_serverInfo.DiskUsage["media"].Used * 1024 / Math.Pow(1024, 4):N2}/{_serverInfo.DiskUsage["media"].Total * 1024 / Math.Pow(1024, 4):N2} TiB")</MudText>
                    </MudProgressLinear>
                </MudStack>
            }
        }
        <MudSpacer/>
        <MudElement Class="ml-2 mt-0">
            <MudTextField T="string"
                          Label="Filter"
                          Variant="Variant.Outlined"
                          Value="_searchString"
                          ValueChanged="OnSearch"
                          AutoFocus="false"
                          Adornment="Adornment.End"
                          Margin="Margin.Dense"
                          AdornmentColor="Color.Info"
                          AdornmentIcon="@Icons.Material.Filled.Search"/>
        </MudElement>
    </MudPaper>
    <MudTable Striped="true"
              HeaderClass="mud-theme-info"
              Outlined="false"
              Bordered="false"
              Loading="_loading"
              LoadingProgressColor="Color.Info"
              ServerData="@(new Func<TableState, Task<TableData<TorrentInfo>>>(ServerReload))"
              Elevation="2"
              RowsPerPage="20"
              Dense="true"
              @ref="_table">
        <HeaderContent>
            <MudTh Class="py-2">
                <MudTableSortLabel SortLabel="Name" T="TorrentInfo">
                    <MudText Typo="Typo.body2" Class="mr-1">Name</MudText>
                    <MudTooltip Arrow="true" Placement="Placement.Top" Text="Hover over filename to see fullname" RootClass="d-flex">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Info"/>
                    </MudTooltip>
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="TotalSize" T="TorrentInfo">
                    <MudText Style="white-space: nowrap;" Typo="Typo.body2">Total Size</MudText>
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="AmountLeft" T="TorrentInfo">Remaining</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="DownloadSpeed" T="TorrentInfo">
                    <MudText Style="white-space: nowrap;" Typo="Typo.body2">@_totalDownloadSpeed</MudText>
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Progress" T="TorrentInfo">Progress</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="ETA" T="TorrentInfo">ETA</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="State" T="TorrentInfo">State</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Category" T="TorrentInfo">Category</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="Availability" T="TorrentInfo">Availability</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="Added" T="TorrentInfo">Added</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="ETA" T="TorrentInfo">Deletion</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                <MudTooltip Arrow="true" Placement="Placement.Top">
                    <ChildContent>
                        <MudText Style="white-space: nowrap;" Typo="Typo.body2">@context.Name.TruncateWithEllipsis(_breakpoint)</MudText>
                    </ChildContent>
                    <TooltipContent>
                        @foreach (var line in  context.Name.GetSplitLines())
                        {
                            <MudText Typo="Typo.body2">@line</MudText>
                        }
                    </TooltipContent>
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="TotalSize">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@($"{context.TotalSize / Math.Pow(1024, 2):N2} MiB")</MudText>
            </MudTd>
            <MudTd DataLabel="AmountLeft">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@FormatRemaining(context.AmountLeft)</MudText>
            </MudTd>
            <MudTd DataLabel="DownloadSpeed">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@FormatDownload(context.Progress, context.DownloadSpeed)</MudText>
            </MudTd>
            <MudTd DataLabel="Progress">
                <MudProgressLinear Style="width: 100%; min-width: 250px; transition: width 0.5s ease-in-out;"
                                   Color="@(context.Progress < 1 ? Color.Info : Color.Success)"
                                   Rounded="true"
                                   Striped="@(context.Progress < 1 && context.State.ToLower() != "pauseddl")"
                                   Size="Size.Large"
                                   Value="@(context.Progress * 100)">
                    <MudText Typo="Typo.caption" Color="Color.Dark">@FormatProgress(context.Progress)</MudText>
                </MudProgressLinear>
            </MudTd>
            <MudTd DataLabel="ETA">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@(context.Progress < 1 ? context.Eta.SecondsToTime().Humanize() : "---")</MudText>
            </MudTd>
            <MudTd DataLabel="State">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@StateToString(context.State)</MudText>
            </MudTd>
            <MudTd DataLabel="Category">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@context.Category.Titleize()</MudText>
            </MudTd>
            <MudTd DataLabel="Availability">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@($"{(context.Progress < 1 ? context.Availability : "---"):N2}")</MudText>
            </MudTd>
            <MudTd DataLabel="Added">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@context.AddedOn.LongToDateTime().Humanize()</MudText>
            </MudTd>
            <MudTd DataLabel="ETA">
                <MudText Style="white-space: nowrap;" Typo="Typo.body2">@(context.Progress < 1 ? "---" : $"in {context.Eta.SecondsToTime().Humanize()}")</MudText>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Class="my-4">No torrents found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {20, 50, 100}"/>
        </PagerContent>
    </MudTable>
</MudStack>

@code {
    private MudTable<TorrentInfo>? _table;
    private bool _loading = true;
    private string? _searchString;
    private IEnumerable<TorrentInfo>? _pagedData;
    private int _totalItems;
    private Timer? _timer;
    private Breakpoint _breakpoint;
    private string _totalDownloadSpeed = "Download";
    private ServerInfo? _serverInfo;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _breakpoint = await BreakpointService.GetBreakpoint();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _serverInfo = await TorrentService.FetchServerState();
        _timer = new Timer(Callback, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private async void Callback(object? _) => await RefreshTable();

    private async Task RefreshTable()
    {
        _loading = true;
        await InvokeAsync(() => _table!.ReloadServerData());
    }

    private async Task<TableData<TorrentInfo>> ServerReload(TableState state)
    {
        var paginationQuery = new Pagination
        {
            Page = state.Page,
            PageSize = state.PageSize,
            SortLabel = state.SortLabel,
            SortDirection = (int)state.SortDirection,
            SearchString = _searchString?.ToLower(),
        };

        var result = await TorrentService.FetchTorrentData(paginationQuery);
        var speedTotal = result?.Torrents?.Sum(x => x.DownloadSpeed);
        _totalDownloadSpeed = speedTotal is 0 or null ? "Download" : $"Download ({speedTotal * (8 / Math.Pow(1024, 2)):F2} Mbps)";

        _pagedData = result?.Torrents?.ToArray();
        _totalItems = result?.Count ?? 0;
        _loading = false;
        return new TableData<TorrentInfo> {TotalItems = _totalItems, Items = _pagedData};
    }

    private void OnSearch(string text)
    {
        if (_searchString == text) return;
        _searchString = text;
        _table!.ReloadServerData();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private static string StateToString(string state)
    {
        var result = state switch
        {
            "error" => "Error",
            "missingFiles" => "Missing Files",
            "uploading" => "Complete",
            "pausedUP" => "Complete",
            "queuedUP" => "Complete",
            "stalledUP" => "Complete",
            "checkingUP" => "Complete",
            "forcedUP" => "Complete",
            "allocating" => "Allocating",
            "downloading" => "Downloading",
            "metaDL" => "Downloading Meta",
            "pausedDL" => "Paused Download",
            "queuedDL" => "Queued Download",
            "stalledDL" => "Stalled Download",
            "checkingDL" => "Checking Download",
            "forcedDL" => "[F] Downloading",
            "checkingResumeData" => "Checking Resume Data",
            "moving" => "Moving",
            _ => "Unknown"
            };
        return result;
    }

    private static string FormatProgress(double progress) => progress is 1 ? "Complete" : $"{progress * 100:N2}%";
    private static string FormatRemaining(double remaining) => remaining is 0 ? "---" : $"{remaining / Math.Pow(1024, 2):N2} MiB";
    private static string FormatDownload(double progress, double download) => progress is 1 ? "---" : $"{download * (8 / Math.Pow(1024, 2)):F2} Mbps";
}
